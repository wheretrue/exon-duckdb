# Holds function documentation for the public functions in WTT-01

# TODO: Add error conditions
---
tableFunctions:
  - functionName: "read_gff"
    functionType: "Table"
    description: "Read a GFF file and return a table with the results."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the GFF file."
      - name: "compression"
        type: "string"
        description: "The compression type of the GFF file. Inferred from the file name if a value is not provided."
        default: "none"
        allowedValues:
          - "none"
          - "gzip"
          - "zstd"
    schema: &gff_schema
      - name: "reference_sequence_name"
        type: "string"
        nullable: false
      - name: "source"
        type: "string"
        nullable: false
      - name: "annotation_type"
        type: "string"
        nullable: false
      - name: "start"
        type: "bigint"
        nullable: false
      - name: "end"
        type: "bigint"
        nullable: false
      - name: "score" # TODO: This is not in the rust table.
        type: "double"
        nullable: true
      - name: "strand"
        type: "string"
        nullable: false
      - name: "phase"
        type: "string"
        nullable: true
      - name: "attributes"
        type: "map<string, string>"
        nullable: true
    examples:
      - example: "SELECT * FROM 'path/to/file.gff';"
        description: "Read a GFF file and return a table with the results using the default compression type."
      - example: "SELECT * FROM 'path/to/file.gff.gz';"
        description: "Read a GFF file and return a table with the results using the gzip compression type. This is inferred from the file name."
      - example: "SELECT * FROM read_gff('path/to/file.gff.gz', 'gzip');"
        description: "Read a GFF file and return a table with the results using the gzip compression type. This is explicitly provided."
      - example: "SELECT * FROM read_gff('path/to/file.gff.zst', 'zstd');"
        description: "Read a GFF file and return a table with the results using the zstd compression type. This is explicitly provided."
    replacementScan:
      example: "SELECT * FROM 'path/to/file.gff';"
      patterns:
        - "*.gff"
        - "*.gff.gz"
        - "*.gff.zst"
  - functionName: "read_genbank"
    function: Table
    description: "Read a GenBank file and return a table with the results."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the GenBank file."
    replacementScan:
      example: "SELECT * FROM 'path/to/file.gff';"
      patterns:
        - "*.gb"
        - "*.genbank"
    schema:
      - name: "sequence"
        type: "string"
        nullable: false
      - name: "accession"
        type: "string"
        nullable: true
      - name: "comments"
        type: "string"
        nullable: true
      - name: "contig"
        type: "string"
        nullable: true
      - name: "date"
        type: "string"
        nullable: true
      - name: "dblink"
        type: "string"
        nullable: true
      - name: "definition"
        type: "string"
        nullable: true
      - name: "division"
        type: "string"
        nullable: true
      - name: "keywords"
        type: "string"
        nullable: true
      - name: "molecule_type"
        type: "string"
        nullable: true
      - name: "name"
        type: "string"
        nullable: true
      - name: "titles"
        type: "string"
        nullable: true
      - name: "source"
        type: "string"
        nullable: true
      - name: "version"
        type: "string"
        nullable: true
      - name: "topology"
        type: "string"
        nullable: true
      - name: "features"
        type: "array<struct(kind varchar, location varchar, qualifiers map(varchar, varchar))>"
        nullable: true
    examples:
      - example: "SELECT * FROM 'path/to/file.gb';"
        description: "Read a GenBank file and return a table with the results using the default compression type."
      - example: "SELECT accession, UNNEST(features) features FROM 'path/to/file.gb';"
        description: "Unnest the features column so rather than a list, there's one feature per row."
  - functionName: "read_vcf_file_records"
    functionType: "Table"
    description: "Read a VCF/BGzipped-VCF file and return the records as rows in a table."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the VCF file."
      - name: "compression"
        type: "string"
        description: "The compression type of the VCF file. Inferred from the file name if a value is not provided."
        default: "none"
        allowedValues:
          - "none"
          - "gzip"
          - "bcf"
    schema: &vcf_schema
      - name: "chromosome"
        type: "string"
        nullable: false
      - name: "ids"
        type: "list<str>"
        nullable: true
      - name: "position"
        type: bigint
        nullable: false
      - name: "reference_bases"
        type: string
        nullable: false
      - name: "alternate_bases"
        type: string
        nullable: false
      - name: quality_score
        type: float
        nullable: true
      - name: filter
        type: "string"
        nullable: true
      - name: info
        type: "string"
        nullable: true
      - name: "genotypes"
        type: "string"
        nullable: true
    examples:
      - example: "SELECT * FROM 'path/to/file.vcf';"
        description: "Read a VCF file and return a table with the results using the default compression type."
      - example: "SELECT * FROM 'path/to/file.vcf.gz';"
        description: "Read a VCF file and return a table with the results using the (block-) gzip compression type. This is inferred from the file name."
    replacementScan:
      example: "SELECT * FROM 'path/to/file.vcf';"
      patterns:
        - "*.vcf"
        - "*.vcf.gz"
        - "*.bcf"
  - functionName: "read_fastq"
    functionType: "Table"
    description: "Read a FASTQ file and return a table with the results."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the FASTQ file. This can also be a glob, e.g. './*.fastq'"
      - name: "compression"
        type: "string"
        description: "The compression type of the FASTQ file. Inferred from the file name if a value is not provided."
        default: "none"
        allowedValues:
          - "none"
          - "gzip"
          - "zstd"
    schema: &fastq_schema
      - name: "name"
        type: "string"
        nullable: false
      - name: "description"
        type: "string"
        nullable: true
      - name: "sequence"
        type: "string"
        nullable: false
      - name: "quality"
        type: "string"
        nullable: false
    examples:
      - example: "SELECT * FROM 'path/to/file.fastq';"
        description: "Read a FASTQ file and return a table with the results using the default compression type."
      - example: "SELECT * FROM 'path/to/*.fastq';"
        description: "Read all the FASTQ files in `path/to`."
      - example: "SELECT * FROM 'path/to/file.fastq.gz';"
        description: "Read a FASTQ file and return a table with the results using the gzip compression type. This is inferred from the file name."
      - example: "SELECT * FROM read_fastq('path/to/file.fastq.gz', 'gzip');"
        description: "Read a FASTQ file and return a table with the results using the gzip compression type. Uses the function vs relying on the replacement scan."
      - example: "SELECT * FROM read_fastq('path/to/file.fastq.zst', 'zstd');"
        description: "Read a FASTQ file and return a table with the results using the zstd compression type. Uses the function vs relying on the replacement scan."
    replacementScan:
      example: "SELECT * FROM 'path/to/file.fastq';"
      patterns:
        - "*.fastq"
        - "*.fq"
        - "*.fq.gz"
        - "*.fastq.gz"
        - "*.fq.zst"
        - "*.fastq.zst"
  - functionName: read_bed_file
    functionType: Table
    description: Read a BED file and return a table with the results.
    arguments:
      - name: filepath
        type: string
        description: The path to the BED file.
      - name: n_columns
        type: integer
        description: The number of columns in the BED file. Defaults to 3. Must be between 3 and 9, or 12.
        nullable: true
      - name: compression
        type: string
        description: The compression type of the BED file. Inferred from the file name if a value is not provided.
        default: none
        allowedValues:
          - none
          - gzip
          - zstd
    schema:
      - name: chromosome
        type: string
        nullable: false
      - name: start
        type: integer
        nullable: false
      - name: end
        type: integer
        nullable: false
      - name: name
        type: string
        nullable: true
      - name: score
        type: float
        nullable: true
      - name: strand
        type: string
        nullable: true
      - name: thick_start
        type: integer
        nullable: true
      - name: thick_end
        type: integer
        nullable: true
      - name: color
        type: string
        nullable: true
      - name: block_count
        type: integer
        nullable: true
      - name: block_sizes
        type: string
        nullable: true
      - name: block_starts
        type: string
        nullable: true
    examples:
      - example: "SELECT * FROM 'path/to/file.bed';"
        description: "Read a BED file and return a table with the results using the default compression type and 12 columns."
      - example: "SELECT * FROM 'path/to/file.bed.gz';"
        description: "Read a gzipped BED file and return a table with the results using the gzip compression type. This is inferred from the file name."
      - example: "SELECT * FROM read_bed_file('path/to/file.fastq.gz', n_columns=3);"
        description: "Read a BED file and return a table with only the first 3 standard columns."
    replacementScan:
      example: "SELECT * FROM 'path/to/file.bed';"
      patterns:
        - "*.bed"
        - "*.bed.gz"
        - "*.bed.zst"
  - functionName: "read_fasta"
    functionType: "Table"
    description: "Read a FASTA file and return a table with the results."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the FASTA file. This can also be a UNIX style glob."
      - name: "compression"
        type: "string"
        description: "The compression type of the FASTA file. Inferred from the file name if a value is not provided."
        default: "none"
        allowedValues:
          - "none"
          - "gzip"
          - "zstd"
    schema: &fasta_schema
      - name: "id"
        type: "string"
        nullable: false
      - name: "description"
        type: "string"
        nullable: true
      - name: "sequence"
        type: "string"
        nullable: false
    examples:
      - example: "SELECT * FROM 'path/to/file.fasta';"
        description: "Read a FASTA file and return a table with the results using the default compression type."
      - example: "SELECT * FROM 'path/to/*.fasta';"
        description: "Read all the FASTAs in the `path/to` path."
      - example: "SELECT * FROM 'path/to/file.fasta.gz';"
        description: "Read a FASTA file and return a table with the results using the gzip compression type. This is inferred from the file name."
      - example: "SELECT * FROM read_fasta('path/to/file.fasta.gz', 'gzip');"
        description: "Read a FASTA file and return a table with the results using the gzip compression type. Uses the function vs relying on the replacement scan."
      - example: "SELECT * FROM read_fasta('path/to/file.fasta.zst', 'zstd');"
        description: "Read a FASTA file and return a table with the results using the zstd compression type. Uses the function vs relying on the replacement scan."
    replacementScan:
      example: "SELECT * FROM 'path/to/file.fasta';"
      patterns:
        - "*.fasta"
        - "*.fa"
        - "*.fa.gz"
        - "*.fasta.gz"
        - "*.fa.zst"
        - "*.fasta.zst"
  - functionName: "read_hmm_dom_tbl_out"
    functionType: "Table"
    description: "Read a HMMER3 domtblout file and return a table with the results."
    examples:
      - example: "SELECT COUNT(*) FROM read_hmm_dom_tbl_out('test.pfam.hmmout')"
      - description: "Read a HMMER3 domtblout file and return a table with the results."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the HMMER3 domtblout file."
    schema:
      - name: "target_name"
        type: "string"
        nullable: false
      - name: "target_accession"
        type: "string"
        nullable: true
      - name: "tlen"
        type: "int"
        nullable: false
      - name: "query_name"
        type: "string"
        nullable: false
      - name: "accession"
        type: "string"
        nullable: true
      - name: "qlen"
        type: "int"
        nullable: false
      - name: "evalue"
        type: "float"
        nullable: false
      - name: "sequence_score"
        type: "float"
        nullable: false
      - name: "bias"
        type: "float"
        nullable: false
      - name: "domain_number"
        type: "int"
        nullable: false
      - name: "ndom"
        type: "int"
        nullable: false
      - name: "conditonal_evalue"
        type: "float"
        nullable: false
      - name: "independent_evalue"
        type: "float"
        nullable: false
      - name: "domain_score"
        type: "float"
        nullable: false
      - name: "domain_bias"
        type: "float"
        nullable: false
      - name: "hmm_from"
        type: "int"
        nullable: false
      - name: "hmm_to"
        type: "int"
        nullable: false
      - name: "ali_from"
        type: "int"
        nullable: false
      - name: "ali_to"
        type: "int"
        nullable: false
      - name: "env_from"
        type: "int"
        nullable: false
      - name: "env_to"
        type: "int"
        nullable: false
      - name: "accuracy"
        type: "float"
        nullable: false
      - name: "description"
        type: "string"
        nullable: true
  - functionName: "read_sam_file_records"
    functionType: "Table"
    description: "Read a SAM file and return a table with the results."
    arguments:
      - name: "filepath"
        type: "string"
        description: "The path to the SAM file."
    schema:
      - name: sequence
        type: "string"
        nullable: false
      - name: read_name
        type: "string"
        nullable: false
      - name: flags
        type: "int"
        nullable: false
      - name: alignment_start
        type: "int"
        nullable: false
      - name: alignment_end
        type: "int"
        nullable: false
      - name: cigar_string
        type: "string"
        nullable: false
      - name: quality_scores
        type: "string"
        nullable: false
      - name: template_length
        type: "int"
        nullable: false
      - name: mapping_quality
        type: "string"
        nullable: false
      - name;: mate_alignment_start
        type: "int"
        nullable: false
  - functionName: "wtt01_third_party_acknowledgements"
    functionType: "Table"
    description: "Return a table with the third party acknowledgements for WTT-01."
    examples:
      - example: "SELECT * FROM wtt01_third_party_acknowledgements;"
        description: "Return a table with the third party acknowledgements for WTT-01."
    schema:
      - name: "name"
        type: "string"
        nullable: false
      - name: "website"
        type: "string"
        nullable: false
      - name: "license"
        type: "string"
        nullable: false
      - name: "license_url"
        type: "string"
        nullable: false
      - name: "license_text"
        type: "string"
        nullable: false
copyFunctions:
  - functionName: GFF COPY
    functionType: "Copy"
    description: "Copy a table or query to a GFF file."
    examples:
      - example: "COPY (SELECT * FROM 'path/to/old.gff') TO 'path/to/new.gff';"
        description: "Copy a GFF file to a new GFF file."
      - example: "COPY (SELECT * FROM 'path/to/old.gff') TO 'path/to/new.gff.gz';"
        description: "Copy a GFF file to a new GFF file using gzip compression."
    expectedSchema: *gff_schema
    arguments:
      compression:
        - "none"
        - "gzip"
        - "zstd"
      force:
        - "true"
        - "false"
  - functionName: FASTQ COPY
    functionType: "Copy"
    description: "Copy a table or query to a FASTQ file."
    examples:
      - example: "COPY (SELECT * FROM 'path/to/old.fastq') TO 'path/to/new.fastq';"
        description: "Copy a FASTQ file to a new FASTQ file."
      - example: "COPY (SELECT * FROM 'path/to/old.fastq') TO 'path/to/new.fastq.gz';"
        description: "Copy a FASTQ file to a new FASTQ file using gzip compression."
    expectedSchema: *fastq_schema
    arguments:
      compression:
        - "none"
        - "gzip"
        - "zstd"
      force:
        - "true"
        - "false"
  - functionName: FASTA COPY
    functionType: "Copy"
    description: "Copy a table or query to a FASTA file."
    examples:
      - example: "COPY (SELECT * FROM 'path/to/old.fasta') TO 'path/to/new.fasta';"
        description: "Copy a FASTA file to a new FASTA file."
      - example: "COPY (SELECT * FROM 'path/to/old.fasta') TO 'path/to/new.fasta.gz';"
        description: "Copy a FASTA file to a new FASTA file using gzip compression."
    expectedSchema: *fasta_schema
    arguments:
      compression:
        - "none"
        - "gzip"
        - "zstd"
      force:
        - "true"
        - "false"
scalarFunctions:
  - functionName: complement
    functionType: Scalar
    description: "Calculate the complement of a sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to calculate the complement of."
    returnType: "string"
    examples:
      - example: "SELECT complement('ATGC');"
        description: "Calculate the complement of a sequence."
  - functionName: gc_content
    functionType: Scalar
    description: "Calculate the GC content of a sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to calculate the GC content of."
    returnType: "double"
    examples:
      - example: "SELECT gc_content('ATGC');"
        description: "Calculate the GC content of a sequence."
  - functionName: reverse_complement
    functionType: Scalar
    description: "Calculate the reverse complement of a sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to calculate the reverse complement of."
    returnType: "string"
    examples:
      - example: "SELECT reverse_complement('ATGC');"
        description: "Calculate the reverse complement of a sequence."
  - functionName: transcribe
    functionType: Scalar
    description: "Return the RNA transcript of a DNA sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to transcribe."
    returnType: "string"
    examples:
      - example: "SELECT transcribe('ATGC');"
        description: "Return the RNA transcript of a DNA sequence."
  - functionName: translate
    functionType: Scalar
    description: "Return the protein sequence of a DNA sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to translate."
    returnType: "string"
    examples:
      - example: "SELECT translate('ATGCGC');"
        description: "Return the protein sequence of a DNA sequence."
  - functionName: reverse_transcribe
    functionType: Scalar
    description: "Return the DNA sequence of an RNA sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to reverse transcribe."
    returnType: "string"
    examples:
      - example: "SELECT reverse_transcribe('AUGCGC');"
        description: "Return the DNA sequence of an RNA sequence."
  - functionName: reverse_translate
    functionType: Scalar
    description: "Return the DNA sequence of a protein sequence."
    arguments:
      - name: "sequence"
        type: "string"
        description: "The sequence to reverse translate."
    returnType: "string"
    examples:
      - example: "SELECT reverse_translate('M');"
        description: "Return the DNA sequence of a protein sequence."
  - functionName: is_duplicate
    functionType: Scalar
    description: "Return true if the read is a duplicate."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_duplicate(4095);"
        description: "Return true if the read is a duplicate."
  - functionName: is_first_segment
    functionType: Scalar
    description: "Return true if the read is the first segment in a read pair."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_first_segment(4095);"
        description: "Return true if the read is the first segment in a read pair."
  - functionName: is_last_segment
    functionType: Scalar
    description: "Return true if the read is the last segment in a read pair."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_last_segment(4095);"
        description: "Return true if the read is the last segment in a read pair."
  - functionName: is_mate_reverse_complemented
    functionType: Scalar
    description: "Return true if the read's mate is reverse complemented."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_mate_reverse_complemented(4095);"
        description: "Return true if the read's mate is reverse complemented."
  - functionName: is_mate_unmapped
    functionType: Scalar
    description: "Return true if the read's mate is unmapped."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_mate_unmapped(4095);"
        description: "Return true if the read's mate is unmapped."
  - functionName: is_properly_aligned
    functionType: Scalar
    description: "Return true if the read is properly aligned."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_properly_aligned(4095);"
        description: "Return true if the read is properly aligned."
  - functionName: is_quality_control_failed
    functionType: Scalar
    description: "Return true if the read failed quality control."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_quality_control_failed(4095);"
        description: "Return true if the read failed quality control."
  - functionName: is_reverse_complemented
    functionType: Scalar
    description: "Return true if the read is reverse complemented."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_reverse_complemented(4095);"
        description: "Return true if the read is reverse complemented."
  - functionName: is_secondary
    functionType: Scalar
    description: "Return true if the read is secondary."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_secondary(4095);"
        description: "Return true if the read is secondary."
  - functionName: is_segmented
    functionType: Scalar
    description: "Return true if the read is segmented."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_segmented(4095);"
        description: "Return true if the read is segmented."
  - functionName: is_supplementary
    functionType: Scalar
    description: "Return true if the read is supplementary."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_supplementary(4095);"
        description: "Return true if the read is supplementary."
  - functionName: is_unmapped
    functionType: Scalar
    description: "Return true if the read is unmapped."
    arguments:
      - name: "flags"
        type: "int"
        description: "The flags field from the SAM/BAM file."
    returnType: "boolean"
    examples:
      - example: "SELECT is_unmapped(4095);"
        description: "Return true if the read is unmapped."
  - functionName: gff_parse_attributes
    functionType: Scalar
    description: "Return a map of attributes from a GFF attribute string."
    arguments:
      - name: "attributes"
        type: "string"
        description: "The attributes field from the GFF file. Individual attribute keys and values are separated by '=' and attributes are separated by ';'. E.g. 'ID=exon1;Parent=gene1'."
    returnType: "map<string, string>"
    examples:
      - example: "SELECT gff_parse_attributes('ID=exon1;Parent=gene1');"
        description: "Returns {ID=exon1, Parent=gene1}."
      - example: "SELECT element_at(gff_parse_attributes('ID=exon1;Parent=gene1'), 'ID')[1];"
        description: "Returns exon1."
  - functionName: parse_cigar
    functionType: Scalar
    description: "Return a list of structs representing the CIGAR operations."
    arguments:
      - name: "cigar"
        type: "string"
        description: "The CIGAR string."
    returnType: "array<struct<op:string, len:int>>"
    examples:
      - example: "SELECT parse_cigar('1M2M123S')"
        description: "Returns [{'op': M, 'len': 1}, {'op': M, 'len': 2}, {'op': S, 'len': 123}]"
      - example: "SELECT parse_cigar('MMM')"
        description: "Throws an error because the CIGAR string is invalid."
  - functionName: alignment_string_wfa_gap_affine
    functionType: Scalar
    description: "Return the alignment string for the given sequences using the WFA algorithm with affine gap penalties. Note: this function has multiple arguments configurations. Also it is only available on Linux and Mac builds."
    returnType: "string"
    examples:
      - example: "SELECT alignment_string_wfa_gap_affine('ACGT', 'ACGT');"
        description: "Returns 'MMMM'."
      - example: "SELECT alignment_string_wfa_gap_affine('ACGT', 'ACGT', -1, 1, 1, 1, 'memory_low');"
        description: "Align the sequences with with match score -1, mismatch score 1, gap open score 1, and gap extend score 1. The memory mode is set to 'memory_low'."
      - example: "SELECT alignment_string_wfa_gap_affine('ACGT', 'ACGT', 1, 1, 1, 'memory_low');"
        description: "Align the sequences with with mismatch score 1, gap open score 1, and gap extend score 1. The memory mode is set to 'memory_low'. Note that the match score isn't supplied here."
    arguments:
      - name: "seq1"
        type: "string"
        description: "The first sequence."
      - name: "seq2"
        type: "string"
        description: "The second sequence."
      - name: "match"
        type: "int"
        description: "The match score. Optional."
      - name: "mismatch"
        type: "int"
        description: "The mismatch score. Optional."
      - name: "gap_open"
        type: "int"
        description: "The gap open score. Optional."
      - name: "gap_extend"
        type: "int"
        description: "The gap extend score. Optional."
      - name: "memory_mode"
        type: "string"
        description: "The memory mode. Can be 'memory_low', 'memory_medium', or 'memory_high'."
  - functionName: alignment_score_wfa_gap_affine
    functionType: Scalar
    description: "Return the alignment score for the second sequence against the first sequence using the WFA algorithm with affine gap penalties. The lower the score the worse alignment. Note: this function has multiple arguments configurations. Also it is only available on Linux and Mac builds."
    returnType: "float"
    examples:
      - example: "SELECT alignment_score_wfa_gap_affine('ACGT', 'ACGT');"
        description: "Returns 0.0'."
      - example: "SELECT alignment_score_wfa_gap_affine('TCTTTACTCGCGCGTTGGAGAAATACAATAGT', 'TCTATACTGCGCGTTTGGAGAAATAAAATAGT');"
        description: "Returns -24.0'."
      - example: "SELECT alignment_score_wfa_gap_affine('TCTTTACTCGCGCGTTGGAGAAATACAATAGT', 'TCTATACTGCGCGTTTGGAGAAATAAAATAGT', -1, 1, 1, 1, 'memory_low');"
        description: "Align the sequences with with match score -1, mismatch score 1, gap open score 1, and gap extend score 1. The memory mode is set to 'memory_low'."
      - example: "SELECT alignment_score_wfa_gap_affine('ACGT', 'ACGT', 1, 1, 1, 'memory_low');"
        description: "Align the sequences with with mismatch score 1, gap open score 1, and gap extend score 1. The memory mode is set to 'memory_low'. Note that the match score isn't supplied here."
    arguments:
      - name: "seq1"
        type: "string"
        description: "The first sequence."
      - name: "seq2"
        type: "string"
        description: "The second sequence."
      - name: "match"
        type: "int"
        description: "The match score. Optional."
      - name: "mismatch"
        type: "int"
        description: "The mismatch score. Optional."
      - name: "gap_open"
        type: "int"
        description: "The gap open score. Optional."
      - name: "gap_extend"
        type: "int"
        description: "The gap extend score. Optional."
      - name: "memory_mode"
        type: "string"
        description: "The memory mode. Can be 'memory_low', 'memory_medium', or 'memory_high'."
  - functionName: wtt01_version
    functionType: Scalar
    description: "Return the version of the WTT-01."
    returnType: "string"
    examples:
      - example: "SELECT wtt01_version();"
        description: "Return the version of the WTT-01."
