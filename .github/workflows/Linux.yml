name: Linux
on:
  - push
  - pull_request
  - repository_dispatch

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/main' || github.sha }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read
  id-token: write

jobs:
  linux:
    name: Linux Release
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        # Add commits/tags to build against other DuckDB versions
        duckdb_version: ["v0.7.1"]
        # arch: ["linux_amd64", "linux_arm64", "linux_amd64_gcc4"]
        arch: ["linux_amd64", "linux_amd64_gcc4"]
        include:
          - arch: "linux_amd64"
            container: "ubuntu:20.04"
          # - arch: "linux_arm64"
          #   container: "ubuntu:18.04"
          - arch: "linux_amd64_gcc4"
            container: "quay.io/pypa/manylinux2014_x86_64"
    env:
      GEN: ninja

    steps:
      - name: Set Up Env Vars for Prod
        if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, 'dev')
        run: |
          echo "Setting Prod Build Env Vars"
          echo "CHECK_LICENSE=1" >> $GITHUB_ENV
          echo "WTT_01_LICENSE_URL=https://api.wheretrue.com" >> $GITHUB_ENV
          echo "ENVIRONMENT=prd" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=894819748579" >> $GITHUB_ENV

      - name: Set Up Env Vars for Dev Override if Applicable
        if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, 'dev')
        run: |
          echo "Overriding Env Vars for Dev Build"
          echo "CHECK_LICENSE=0" >> $GITHUB_ENV
          echo "WTT_01_LICENSE_URL=https://api.wheretrue.net" >> $GITHUB_ENV
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=900163113876" >> $GITHUB_ENV

      - name: Set Up Env Vars for Dev Override if Applicable
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' || github.event_name == 'push' && github.event.ref != 'refs/heads/main'
        run: |
          echo "Overriding Env Vars for Dev Build"
          echo "CHECK_LICENSE=0" >> $GITHUB_ENV
          echo "WTT_01_LICENSE_URL=https://api.wheretrue.net" >> $GITHUB_ENV
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "AWS_ACCOUNT_ID=900163113876" >> $GITHUB_ENV

      - name: Print Build Env Vars
        run: |
          echo ${{ env.CHECK_LICENSE }}
          echo ${{ env.WTT_01_LICENSE_URL}}
          exit 0

      - name: Install required ubuntu packages
        if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
        run: |
          apt-get update -y -qq
          apt-get install -y -qq software-properties-common
          add-apt-repository ppa:git-core/ppa
          apt-get update -y -qq
          apt-get install -y -qq ninja-build make gcc-multilib g++-multilib libssl-dev wget openjdk-8-jdk zip maven unixodbc-dev libc6-dev-i386 lib32readline6-dev libssl-dev libcurl4-gnutls-dev libexpat1-dev gettext unzip build-essential checkinstall libffi-dev curl libz-dev openssh-client pkg-config extra-cmake-modules

      - name: Install Git 2.18.5
        if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
        run: |
          wget https://github.com/git/git/archive/refs/tags/v2.18.5.tar.gz
          tar xvf v2.18.5.tar.gz
          cd git-2.18.5
          make
          make prefix=/usr install
          git --version

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: "true"

      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Checkout DuckDB to version
        if: ${{ matrix.duckdb_version != '<submodule_version>'}}
        run: |
          cd duckdb
          git checkout ${{ matrix.duckdb_version }}

      - if: ${{ matrix.arch == 'linux_amd64_gcc4' }}
        uses: ./duckdb/.github/actions/centos_7_setup
        with:
          openssl: 1

      - if: ${{ matrix.arch == 'linux_amd64' || matrix.arch == 'linux_arm64' }}
        uses: ./duckdb/.github/actions/ubuntu_16_setup
        with:
          openssl: 1
          aarch64_cross_compile: ${{ matrix.arch == 'linux_arm64' && 1 }}

        # Build extension
      - name: Build extension
        env:
          GEN: ninja
          STATIC_LIBCPP: 1
          CC: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-gcc' || '' }}
          CXX: ${{ matrix.arch == 'linux_arm64' && 'aarch64-linux-gnu-g++' || '' }}
          CHECK_LICENSE: ${{ env.CHECK_LICENSE }}
          WTT_01_LICENSE_URL: ${{ env.WTT_01_LICENSE_URL }}
        run: |
          make release

      - name: Test extension (skip if CHECK_LICENSE=1)
        if: env.CHECK_LICENSE == 0
        run: |
          make test


      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.arch}}-extensions
          path: |
            build/release/extension/wtt01/wtt01.duckdb_extension

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-west-2
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-deploy-role
      - name: install boto3
        shell: bash
        run: |
          # python3 -m pip install --upgrade pip
          pip3 install boto3
      - name: upload to s3
        shell: bash
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
        run: |
          python3 bin/upload-artifacts.py
